#!/bin/sh
#
# Golioth Application Daemon
# Starts golioth_app as a background daemon
#

DAEMON="golioth_app"
PIDFILE="/var/run/golioth_app.pid"
CONFIG_FILE="/etc/golioth_app.conf"

# Check if config file exists and source it
if [ -f "$CONFIG_FILE" ]; then
    . "$CONFIG_FILE"
fi

# Set default credentials if not set in config
: ${GOLIOTH_SAMPLE_PSK_ID:=""}
: ${GOLIOTH_SAMPLE_PSK:=""}

start() {
    printf "Starting $DAEMON: "

    # Check if daemon is already running
    if [ -f "$PIDFILE" ] && kill -0 "$(cat "$PIDFILE")" 2>/dev/null; then
        echo "already running"
        return 1
    fi

    # Ensure SWUpdate is running (required for Multi-Version OTA)
    if ! /etc/init.d/S80swupdate status >/dev/null 2>&1; then
        printf "\nStarting SWUpdate (required for OTA): "
        /etc/init.d/S80swupdate start
        if [ $? -ne 0 ]; then
            echo "FAILED"
            echo "Error: Could not start SWUpdate service"
            return 1
        fi
    fi

    # Check if credentials are set
    if [ -z "$GOLIOTH_SAMPLE_PSK_ID" ] || [ -z "$GOLIOTH_SAMPLE_PSK" ]; then
        echo "FAILED"
        echo "Error: Golioth credentials not set. Please set GOLIOTH_SAMPLE_PSK_ID and GOLIOTH_SAMPLE_PSK"
        echo "Either in $CONFIG_FILE or as environment variables"
        return 1
    fi

    # Export credentials for the daemon
    export GOLIOTH_SAMPLE_PSK_ID
    export GOLIOTH_SAMPLE_PSK

    # Start the daemon
    start-stop-daemon --start --quiet --background --make-pidfile \
        --pidfile "$PIDFILE" --exec /usr/bin/$DAEMON

    if [ $? -eq 0 ]; then
        echo "OK"
    else
        echo "FAILED"
        return 1
    fi
}

stop() {
    printf "Stopping $DAEMON: "

    if [ ! -f "$PIDFILE" ]; then
        echo "not running"
        return 1
    fi

    # Send SIGTERM for graceful shutdown
    start-stop-daemon --stop --quiet --pidfile "$PIDFILE" --signal TERM

    # Wait up to 10 seconds for graceful shutdown
    for i in $(seq 1 10); do
        if ! kill -0 "$(cat "$PIDFILE")" 2>/dev/null; then
            break
        fi
        sleep 1
    done

    # If still running, force kill
    if kill -0 "$(cat "$PIDFILE")" 2>/dev/null; then
        start-stop-daemon --stop --quiet --pidfile "$PIDFILE" --signal KILL
    fi

    rm -f "$PIDFILE"
    echo "OK"
}

restart() {
    stop
    sleep 1
    start
}

status() {
    if [ -f "$PIDFILE" ] && kill -0 "$(cat "$PIDFILE")" 2>/dev/null; then
        echo "$DAEMON is running (PID $(cat "$PIDFILE"))"
        return 0
    else
        echo "$DAEMON is not running"
        return 1
    fi
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    status)
        status
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status}"
        exit 1
        ;;
esac

exit $?